===
3.1.2 Forall
===
fn main() {
  forall {
      /// Here computation splits into 2^32 subpaths,
      /// with `x` holding distinct value on each
      let x: u32 = @;

      /// Here each computation splits further, independently
      /// checking both required properties for every possible
      /// value of `x` on separate execution paths.
      if @ { check_foo(x); }
      else { check_bar(x); }
  }

  /// This point is reached iff both functions terminate
  /// successfully on every possible input value.
  print("Success!");
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (block
          (forall_block
            (block
              (comment)
              (comment)
              (variable_definition_statement
                (identifier)
                (type_u32)
                (assign_operator)
                (uzumaki_keyword))
              (comment)
              (comment)
              (comment)
              (if_statement
                (uzumaki_keyword)
                (block
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier))))
                (block
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier)))))))
          (comment)
          (comment)
          (expression_statement
            (function_call_expression
              (identifier)
              (string_literal))))))
===
3.1.3 Exists
===
fn main() {
  exists {
      /// Here computation splits into 2^32 subpaths,
      /// with `x` holding distinct value on each
      let x: u32 = @;

      /// Here each computation splits further, independently
      /// checking both required properties for every possible
      /// value of `x` on separate execution paths.
      if @ { check_foo(x); }
      else { check_bar(x); }
  }

  /// This point is reached iff one of the functions terminate
  /// successfully on at least one possible input value.
  print("Success!");
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (block
          (exists_block
            (block
              (comment)
              (comment)
              (variable_definition_statement
                (identifier)
                (type_u32)
                (assign_operator)
                (uzumaki_keyword))
              (comment)
              (comment)
              (comment)
              (if_statement
                (uzumaki_keyword)
                (block
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier))))
                (block
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier)))))))
          (comment)
          (comment)
          (expression_statement
            (function_call_expression
              (identifier)
              (string_literal))))))
===
3.1.4 Assume
===
fn main() {
  forall {
      /// Here computation splits into 2^32 subpaths,
      /// with `x` holding distinct value on each
      let x: u32 = @;

      /// Here we filter only execution paths, where given
      /// precondition is met, indicated by successfull termination
      /// of function.
      assume { check_foo(x); }

      /// Here we check given implication of precondition above
      check_bar(x);
  }

  /// This point is reached iff every value of x that successfully
  /// pass through `check_foo` also successfully pass through
  /// `check_bar`.
  print("Success!");
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (block
          (forall_block
            (block
              (comment)
              (comment)
              (variable_definition_statement
                (identifier)
                (type_u32)
                (assign_operator)
                (uzumaki_keyword))
              (comment)
              (comment)
              (comment)
              (assume_block
                (block
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier)))))
              (comment)
              (expression_statement
                (function_call_expression
                  (identifier)
                  (identifier)))))
          (comment)
          (comment)
          (comment)
          (expression_statement
            (function_call_expression
              (identifier)
              (string_literal))))))

===
3.1.4.2 Examples
===
fn main() {
  let x: i32 = @;
  assert(x + 1 > x);

  let user_input: bool = @;

  if user_input {
      /// Handle true case
  } else {
      /// Handle false case
  }

  let mut choice: i32 = @;
  choice = choice % 3;
  if (choice == 0) {
      /// Handle case 0
  } else if (choice == 1) {
      /// Handle case 1
  } else {
      /// Handle case 2
  }
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_i32)
            (assign_operator)
            (uzumaki_keyword))
          (assert_statement
            (parenthesized_expression
              (binary_expression
                (binary_expression
                  (identifier)
                  (add_operator)
                  (number_literal))
                (greater_operator)
                (identifier))))
          (variable_definition_statement
            (identifier)
            (type_bool)
            (assign_operator)
            (uzumaki_keyword))
          (if_statement
            (identifier)
            (block
              (comment))
            (block
              (comment)))
          (variable_definition_statement
            (mut_keyword)
            (identifier)
            (type_i32)
            (assign_operator)
            (uzumaki_keyword))
          (assign_statement
            (identifier)
            (assign_operator)
            (binary_expression
              (identifier)
              (mod_operator)
              (number_literal)))
          (if_statement
            (parenthesized_expression
              (binary_expression
                (identifier)
                (equals_operator)
                (number_literal)))
            (block
              (comment))
            (parenthesized_expression
              (binary_expression
                (identifier)
                (equals_operator)
                (number_literal)))
            (block
              (comment))
            (block
              (comment))))))
