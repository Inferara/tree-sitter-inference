===
5.2 Specification Is Not a Program
===
spec BasicConcepts {

    external fn sum(a: i32, b: i32) -> i32;
    external fn sub(i32, i32) -> i32;

    fn sum_sub_spec() forall {
        let a: i32 = @;
        let b: i32 = @;
        assert(sum(a, b) == a + b);
        assert(sub(a, b) == a - b);
    }

    fn proof() {
        sum_sub_spec();
    }

}
---
    (source_file
      (spec_definition
        (identifier)
        (external_function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (type_i32))
            (argument_declaration
              (identifier)
              (type_i32)))
          (type_i32))
        (external_function_definition
          (identifier)
          (argument_list
            (type_i32)
            (type_i32))
          (type_i32))
        (function_definition
          (identifier)
          (argument_list)
          (forall_block
            (block
              (variable_definition_statement
                (identifier)
                (type_i32)
                (uzumaki_keyword))
              (variable_definition_statement
                (identifier)
                (type_i32)
                (uzumaki_keyword))
              (assert_statement
                (parenthesized_expression
                  (binary_expression
                    (function_call_expression
                      (identifier)
                      (identifier)
                      (identifier))
                    (binary_expression
                      (identifier)
                      (identifier)))))
              (assert_statement
                (parenthesized_expression
                  (binary_expression
                    (function_call_expression
                      (identifier)
                      (identifier)
                      (identifier))
                    (binary_expression
                      (identifier)
                      (identifier))))))))
        (function_definition
          (identifier)
          (argument_list)
          (block
            (expression_statement
              (function_call_expression
                (identifier)))))))
===
5.4 Non-Deterministic Execution
===
fn foo() {
    assume {
        let x: u32 = @;
        forall {
            let y: u32 = @;
            foobar(param1 : @, param2: 5);
            //<do some checking for x and y>
        }
    }
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (assume_block
            (block
              (variable_definition_statement
                (identifier)
                (type_u32)
                (uzumaki_keyword))
              (forall_block
                (block
                  (variable_definition_statement
                    (identifier)
                    (type_u32)
                    (uzumaki_keyword))
                  (expression_statement
                    (function_call_expression
                      (identifier)
                      (identifier)
                      (uzumaki_keyword)
                      (identifier)
                      (number_literal)))
                      (comment))))))))
