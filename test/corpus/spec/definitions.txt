===
10.1.2 Examples (Constants)
===
spec Definitions {
    const MAX_SIZE: u32 = 100;
}
---
(source_file
      (spec_definition
        (identifier)
        (constant_definition
          (identifier)
          (type_u32)
          (number_literal))))

===
10.2.2 Examples (Function)
===
fn sum(a: u32, b: u32) -> u32 {
  return a + b;
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_u32))
          (argument_declaration
            (identifier)
            (type_u32)))
        (type_u32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (identifier))))))

===
10.3.2 Examples (External function)
===
spec Definitions {
    external fn external_function(a: u32, b: u32) -> u32;
}
---
    (source_file
      (spec_definition
        (identifier)
        (external_function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (type_u32))
            (argument_declaration
              (identifier)
              (type_u32)))
          (type_u32))))

===
10.4.2 Examples (Type)
===
spec Definitions {
    type Address = u32;
}
---
    (source_file
      (spec_definition
        (identifier)
        (type_definition_statement
          (identifier)
          (type_u32))))

===
10.5.2 Examples (spec)
===
spec AuctionSpec {  
    const MAX_BID: u64 = 1000;
    const MIN_BID: u64 = 100;

    struct Bid {
      bidder: Address;
      amount: u64;
    }

    enum AuctionState {
      Open,
      Closed
    }

    fn is_valid_bid(bid: Bid) -> bool {
      return bid.amount >= MIN_BID && bid.amount <= MAX_BID;
    }

    fn is_auction_open(state: AuctionState) -> bool {
      return state == AuctionState::Open;
    }
}
---
    (source_file
      (spec_definition
        (identifier)
        (constant_definition
          (identifier)
          (type_u64)
          (number_literal))
        (constant_definition
          (identifier)
          (type_u64)
          (number_literal))
        (struct_definition
          (identifier)
          (struct_field
            (identifier)
            (identifier))
          (struct_field
            (identifier)
            (type_u64)))
        (enum_definition
          (identifier)
          (identifier)
          (identifier))
        (function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (identifier)))
          (type_bool)
          (block
            (return_statement
              (binary_expression
                (binary_expression
                  (member_access_expression
                    (identifier)
                    (identifier))
                  (identifier))
                (binary_expression
                  (member_access_expression
                    (identifier)
                    (identifier))
                  (identifier))))))
        (function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (identifier)))
          (type_bool)
          (block
            (return_statement
              (binary_expression
                (identifier)
                (type_member_access_expression
                  (identifier)
                  (identifier))))))))

===
10.6.2 Examples (Enum)
===
enum Arch {
  WASM,
  EVM
}

enum specType {
  Program,
  Contract
}
---
    (source_file
      (enum_definition
        (identifier)
        (identifier)
        (identifier))
      (enum_definition
        (identifier)
        (identifier)
        (identifier)))

===
10.7.2 Examples (Struct)
===
struct Account {
  address: Address;
  balance: u64;

  fn can_withdraw(amount: u64) -> bool {
    return self.balance >= amount;
  }
}
---
    (source_file
      (struct_definition
        (identifier)
        (struct_field
          (identifier)
          (identifier))
        (struct_field
          (identifier)
          (type_u64))
        (function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (type_u64)))
          (type_bool)
          (block
            (return_statement
              (binary_expression
                (member_access_expression
                  (identifier)
                  (identifier))
                (identifier)))))))
