===
11.1.3 Examples (Function definitions)
===
total fn sum(a: u32, b: u32) -> u32 {
  return a + b;
}

context Bridge {
  /// Context-specific functions
}
---
    (source_file
      (function_definition
        (total_keyword)
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_u32))
          (argument_declaration
            (identifier)
            (type_u32)))
        (rightarrow_operator)
        (type_u32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (add_operator)
              (identifier)))))
      (context_definition
        (identifier)))

===
11.2.2 Examples (External functions)
===
external total fn hash(b: [u8;100]) -> [u8;32];

context Hasher {
    total fn hash_verifier() {
        let undef data1: [u8;100];
        let result_1: [u8;32] = hash(data1);
        let undef data2: [u8;100];
        let result_2: [u8;32] = hash(data2);
        if data1 == data2 {
            assert(result_1 == result_2);
        } else {
            assert(result_1 != result_2);
        }
    }

    fn proof() {
        verify hash_verifier();
    }
}
---
    (source_file
      (external_function_definition
        (total_keyword)
        (function_keyword)
        (identifier)
        (argument_declaration
          (identifier)
          (type_array
            (type_u8)
            (number_literal)))
        (rightarrow_operator)
        (type_array
          (type_u8)
          (number_literal)))
      (context_definition
        (identifier)
        (function_definition
          (total_keyword)
          (function_keyword)
          (identifier)
          (argument_list)
          (block
            (variable_definition_statement
              (undef_keyword)
              (identifier)
              (type_array
                (type_u8)
                (number_literal)))
            (variable_definition_statement
              (identifier)
              (type_array
                (type_u8)
                (number_literal))
              (assign_operator)
              (function_call_expression
                (identifier)
                (identifier)))
            (variable_definition_statement
              (undef_keyword)
              (identifier)
              (type_array
                (type_u8)
                (number_literal)))
            (variable_definition_statement
              (identifier)
              (type_array
                (type_u8)
                (number_literal))
              (assign_operator)
              (function_call_expression
                (identifier)
                (identifier)))
            (if_statement
              (binary_expression
                (identifier)
                (equals_operator)
                (identifier))
              (block
                (assert_statement
                  (parenthesized_expression
                    (binary_expression
                      (identifier)
                      (equals_operator)
                      (identifier)))))
              (block
                (assert_statement
                  (parenthesized_expression
                    (binary_expression
                      (identifier)
                      (not_equals_operator)
                      (identifier))))))))
        (function_definition
          (function_keyword)
          (identifier)
          (argument_list)
          (block
            (verify_statement
              (function_call_expression
                (identifier)))))))

===
11.3.2 Examples (High-order functions)
===
fn bubble_sort(arr: [i32;10], compare_function: fn(left: i32, right: i32) -> i32) -> () {
    let n: i32 = 10;
    let i: i32 = 0;
    loop n {
        i = i + 1;
        let j: i32 = 0;
        loop n - i - 1 {
            j = j + 1;
            if compare_function(arr[j], arr[j + 1]) > 0 {
                let temp: i32 = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
---
