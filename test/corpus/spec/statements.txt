===
8.1.2 Examples (Assign)
===
fn example() -> u32 {
  let a: u32 = 42;
  let b: u32 = a;
  return b;
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (type_u32)
        (block
          (variable_definition_statement
            (identifier)
            (type_u32)
            (number_literal))
          (variable_definition_statement
            (identifier)
            (type_u32)
            (identifier))
          (return_statement
            (identifier)))))
===
9.1.2 Examples (Block)
===
fn foo() {
    // This is the function body block
}

fn bar() {
    let flag: bool = true;
    if flag {
        // This is the 'if' block
    } else {
        // This is the 'else' block
    }

    let i: i32 = 10;
    loop i {
        // This is the loop block
    }
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (comment)))
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_bool)
            (bool_literal))
          (if_statement
            (identifier)
            (block
              (comment))
            (block
              (comment)))
          (variable_definition_statement
            (identifier)
            (type_i32)
            (number_literal))
          (loop_statement
            (identifier)
            (block
              (comment))))))

===
9.2.2 Examples (Return)
===
fn foo() -> i32 {
    let res: i32 = 0;
    return res;
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (type_i32)
        (block
          (variable_definition_statement
            (identifier)
            (type_i32)
            (number_literal))
          (return_statement
            (identifier)))))

===
9.3.2 Examples (Filter)
===
fn foo(i: i32) -> () forall {

    assume {
        assert i > 0;
    }

    // This is equivalent to:
    if !(i > 0) {
        // Terminate the function or handle the case accordingly
        return ();
    }
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_i32)))
        (type_unit)
        (forall_block
          (block
            (assume_block
              (block
                (assert_statement
                  (binary_expression
                    (identifier)
                    (number_literal)))))
            (comment)
            (if_statement
              (prefix_unary_expression
                (unary_not)
                (parenthesized_expression
                  (binary_expression
                    (identifier)
                    (number_literal))))
              (block
                (comment)
                (return_statement
                  (unit_literal))))))))
===
9.4.2 Examples (Loop)
===
fn loop_example() {
    loop 10 {
        // This block will be executed 10 times
    }

    loop 0 {
        // This block will not be executed
    }

    let i: i32 = 10;
    loop i {
        // This block will be executed 10 times
        // Modifying 'i' inside the loop is not allowed
    }
}

fn infinite_loop_example() forall {
    assume {
        loop () {
            // Infinite loop body
            break;
        }
    }
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (loop_statement
            (number_literal)
            (block
              (comment)))
          (loop_statement
            (number_literal)
            (block
              (comment)))
          (variable_definition_statement
            (identifier)
            (type_i32)
            (number_literal))
          (loop_statement
            (identifier)
            (block
              (comment)
              (comment)))))
      (function_definition
        (identifier)
        (argument_list)
        (forall_block
          (block
            (assume_block
              (block
                (loop_statement
                  (unit_literal)
                  (block
                    (comment)
                    (break_statement)))))))))

===
9.5.2 Examples (If)
===
fn foo() {
    let flag: bool = true;
    if flag {
        // This block will be executed
    } else {
        // This block will not be executed
    }
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_bool)
            (bool_literal))
          (if_statement
            (identifier)
            (block
              (comment))
            (block
              (comment))))))

===
9.6.3 Examples (Uzumaki)
===
fn foo() {
    let x: i32 = 10;
    let y: i32 = @;
    // 'y' can be any possible i32 value
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_i32)
            (number_literal))
          (variable_definition_statement
            (identifier)
            (type_i32)
            (uzumaki_keyword))
            (comment))))

===
9.7.2 Examples (Type definition)
===
type Address = u32;
---
    (source_file
      (type_definition_statement
        (identifier)
        (type_u32)))

===
9.82 Examples (Assert)
===
fn foo() {
    let flag: u32 = 0;
    assert(flag <= 0);
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_u32)
            (number_literal))
          (assert_statement
            (parenthesized_expression
              (binary_expression
                (identifier)
                (number_literal)))))))

===
9.9.2 Examples (type)
===
type Address = u32;
---
    (source_file
      (type_definition_statement
        (identifier)
        (type_u32)))
