===
4.3.2 Examples (Identifiers)
===
fn main() {
    let a: u32 = 42;
    let _ident : i64 = 42;
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_u32)
            (number_literal))
          (variable_definition_statement
            (identifier)
            (type_i64)
            (number_literal)))))

===
4.5.2 Examples (Qualified identifiers)
===
fn main() {
    let a: spec::AuctionSpec = spec::AuctionSpec::new();
    let b: spec::AuctionSpec = spec.field.method();
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_qualified_name
              (identifier)
              (identifier))
            (function_call_expression
              (type_member_access_expression
                (type_member_access_expression
                  (identifier)
                  (identifier))
                (identifier))))
          (variable_definition_statement
            (identifier)
            (type_qualified_name
              (identifier)
              (identifier))
            (function_call_expression
              (member_access_expression
                (qualified_name
                  (identifier)
                  (identifier))
                (identifier)))))))

===
4.6.2 Examples (Member access)
===
struct Account {
    address: u32;

    fn new(addr: u32) -> Account {
        self.address = addr;
    }
}

fn main() {
    let a: Account = Account::new(42);
    let b: u32 = a.address;
}
---
    (source_file
      (struct_definition
        (identifier)
        (struct_field
          (identifier)
          (type_u32))
        (function_definition
          (identifier)
          (argument_list
            (argument_declaration
              (identifier)
              (type_u32)))
          (identifier)
          (block
            (assign_statement
              (member_access_expression
                (identifier)
                (identifier))
              (identifier)))))
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (identifier)
            (function_call_expression
              (type_member_access_expression
                (identifier)
                (identifier))
              (number_literal)))
          (variable_definition_statement
            (identifier)
            (type_u32)
            (member_access_expression
              (identifier)
              (identifier))))))

===
4.7 Literals
===
fn main() {
  let a: bool = true;
  let b: bool = false;
  let d: unit = ();
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_bool)
            (bool_literal))
          (variable_definition_statement
            (identifier)
            (type_bool)
            (bool_literal))
          (variable_definition_statement
            (identifier)
            (identifier)
            (unit_literal)))))

===
4.8.2 Examples (Right arrow)
===
fn add(a: u32, b: u32) -> u32 {
    return a + b;
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_u32))
          (argument_declaration
            (identifier)
            (type_u32)))
        (type_u32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (identifier))))))

===
4.10 Braces
===
fn curly_braces_example() {
    // code block
}

fn block_braces_example(a: u32, b: u32) -> u32 {
    return a + b;
}

fn square_braces_example() {
  let a: () = ();
  let b: [u32; 3] = [1, 2, 3];
  let c: u32 = a[0];
}

fn triangular_braces_example T' (a: T) {
    // code block
}

fn foo T' (a: T) {
    // code block
}
---
    (source_file
      (function_definition
        (identifier)
        (argument_list)
        (block
          (comment)))
      (function_definition
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_u32))
          (argument_declaration
            (identifier)
            (type_u32)))
        (type_u32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (identifier)))))
      (function_definition
        (identifier)
        (argument_list)
        (block
          (variable_definition_statement
            (identifier)
            (type_unit)
            (unit_literal))
          (variable_definition_statement
            (identifier)
            (type_array
              (type_u32)
              (number_literal))
            (array_literal
              (number_literal)
              (number_literal)
              (number_literal)))
          (variable_definition_statement
            (identifier)
            (type_u32)
            (array_index_access_expression
              (identifier)
              (number_literal)))))
      (function_definition
        (identifier)
        (type_argument_list_definition
          (identifier))
        (argument_list
          (argument_declaration
            (identifier)
            (identifier)))
                (block
                (comment)))
      (function_definition
        (identifier)
        (type_argument_list_definition
          (identifier))
        (argument_list
          (argument_declaration
            (identifier)
            (identifier)))
        (block 
          (comment))))
