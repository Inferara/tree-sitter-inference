===
Function with assert expression statement
===
fn valid_Address(a: Address) -> Address {
    assert (a < 0);
    return a;
}

---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (identifier)))
        (rightarrow_operator)
        (identifier)
        (block
          (expression_statement
            (assert_expression
              (parenthesized_expression
                (binary_expression
                  (identifier)
                  (less_operator)
                  (number_literal)))))
          (return_statement
            (identifier)))))

===
Assign unary expression
===

fn valid_Address(a: Address) -> Address {
    a = !a;
    return a;
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (identifier)))
        (rightarrow_operator)
        (identifier)
        (block
          (expression_statement
            (assign_expression
              (identifier)
              (assign_operator)
              (prefix_unary_expression
                (unary_not)
                (identifier))))
          (return_statement
            (identifier)))))

===
Verify expression
===

fn proof() -> () {
    verify preserving_count(sort);
}

---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_unit)
        (block
          (expression_statement
            (verify_expression
              (function_call_expression
                (identifier)
                (identifier)))))))

===
Assert expression
===

fn proof() -> () {
    assert a < 0;
}

---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_unit)
        (block
          (expression_statement
            (assert_expression
              (binary_expression
                (identifier)
                (less_operator)
                (number_literal)))))))
