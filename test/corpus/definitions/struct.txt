===
Basic struct definition
===

struct pizza {
	toppings : [PizzaTopping; 5];
}

---
(source_file
	(struct_definition
		(identifier)
		(struct_field
			(identifier)
			(type_array
				(identifier)
				(number_literal)))))

===
Structs with multiple fields
===

struct pizza {
	toppings : [PizzaTopping; 5];
	numSlices : i32;
	thinCrust : bool;
}

---
(source_file
	(struct_definition
		(identifier)
		(struct_field
			(identifier)
			(type_array
				(identifier)
				(number_literal)))
		(struct_field
			(identifier)
			(type_i32))
		(struct_field
			(identifier)
			(type_bool))))

===
Struct with T as type
===

struct identity {
	field : T;
}

---
(source_file
	(struct_definition
		(identifier)
		(struct_field
			(identifier)
			(identifier))))

===
Multiple fields
===

struct Pair {
	fst : A;
	snd : B;
}

---
(source_file
	(struct_definition
		(identifier)
		(struct_field
			(identifier)
			(identifier))
		(struct_field
			(identifier)
			(identifier))))

===
Struct with fields and methods
===

struct identity {
  field : T;
  fn getField() -> T {
    return field;
  }
}

---

(source_file
	(struct_definition
		(identifier)
		(struct_field
			(identifier)
			(identifier))
    (function_definition
      (identifier)
      (argument_list)
      (identifier)
      (block
        (return_statement
          (identifier))))))


===
Struct with methods that take reference to self
===

struct Wrapi32 {
	val : i32;
	fn unwrap(self) -> i32 {
		return self.val;
	}
	fn add(mut self, x: i32) {
		self.val = self.val + x;
	}
}
---
    (source_file
      (struct_definition
        (identifier)
        (struct_field
          (identifier)
          (type_i32))
        (function_definition
          (identifier)
          (argument_list
            (self_reference))
          (type_i32)
          (block
            (return_statement
              (member_access_expression
                (identifier)
                (identifier)))))
        (function_definition
          (identifier)
          (argument_list
            (self_reference
              (mut_keyword))
            (argument_declaration
              (identifier)
              (type_i32)))
          (block
            (assign_statement
              (member_access_expression
                (identifier)
                (identifier))
              (binary_expression
                (member_access_expression
                  (identifier)
                  (identifier))
                (identifier)))))))
