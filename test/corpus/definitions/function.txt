===
Function definition
===

fn func() -> i32 {

}

---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type)
        (block)))

===
Function with one parameter
===

fn func(x: i32) -> i32 {

}

---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (argument_list
        (argument_declaration
            (identifier)
            (type)))
    (rightarrow_operator)
    (type)
    (block)))

===
Function with multiple parameters
===
fn func(x: i32, y: i32) -> i32 {

}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type))
          (argument_declaration
            (identifier)
            (type)))
        (rightarrow_operator)
        (type)
        (block)))

===
Function with return i32
===

fn func() -> i32 {
    return 0;
}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type)
        (block
            (return_statement
            (return_keyword)
            (expression
                (literal
                (number_literal)))))))

===
Function with return bool literal
===

fn func() -> bool {
    return true;
}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type)
        (block
          (return_statement
            (return_keyword)
            (expression
              (literal
                (bool_literal)))))))

===
Function with return identifier
===
fn constructor() -> some_context {
}
---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (argument_list)
    (rightarrow_operator)
    (type
        (identifier))
    (block)))

===
Function returns binary expression
===
fn add(a : i32, b : i32) -> i32 {
    return a + b;
}
---
(source_file
    (function_definition
        (function_keyword)
        (identifier)
       (argument_list
          (argument_declaration
            (identifier)
            (type))
          (argument_declaration
            (identifier)
            (type)))
        (rightarrow_operator)
        (type)
        (block
          (return_statement
            (return_keyword)
            (expression
              (binary_expression
                (expression
                  (identifier))
                (add_operator)
                (expression
                  (identifier))))))))

