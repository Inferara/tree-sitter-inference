===
Base function definition
===

fn func() -> i32 {

}

---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_i32)
        (block)))

===
Function definition without return type
===

fn func() {

}

---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (block)))

===
Function with one parameter
===

fn func(x: i32) -> i32 {

}

---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (argument_list
        (argument_declaration
            (identifier)
            (type_i32)))
    (rightarrow_operator)
    (type_i32)
    (block)))

===
Function with multiple parameters
===
fn func(x: i32, y: i32) -> i32 {

}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_i32))
          (argument_declaration
            (identifier)
            (type_i32)))
        (rightarrow_operator)
        (type_i32)
        (block)))

===
Function with return i32
===

fn func() -> i32 {
    return 0;
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_i32)
        (block
          (return_statement
            (number_literal)))))

===
Function with return bool literal
===

fn func() -> bool {
    return true;
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_bool)
        (block
          (return_statement
            (bool_literal)))))

===
Function with return identifier
===
fn constructor() -> some_context {
}
---
(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (argument_list)
    (rightarrow_operator)
    (identifier)
    (block)))

===
Function returns binary expression
===
fn add(a : i32, b : i32) -> i32 {
    return a + b;
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_i32))
          (argument_declaration
            (identifier)
            (type_i32)))
        (rightarrow_operator)
        (type_i32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (add_operator)
              (identifier))))))

===
Total function definition
===
total fn add(a : i32, b : i32) -> i32 {
    return a + b;
}
---
    (source_file
      (function_definition
        (total_keyword)
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (type_i32))
          (argument_declaration
            (identifier)
            (type_i32)))
        (rightarrow_operator)
        (type_i32)
        (block
          (return_statement
            (binary_expression
              (identifier)
              (add_operator)
              (identifier))))))

===
Function with filter block
===

total fn procuring_sorted(func: sf) -> () {
    filter {
      a = valid_Address();
      b = valid_Address();
      assert(a <= b);
    }
}

---
    (source_file
      (function_definition
        (total_keyword)
        (function_keyword)
        (identifier)
        (argument_list
          (argument_declaration
            (identifier)
            (identifier)))
        (rightarrow_operator)
        (type_unit)
        (block
          (filter_statement
            (block
              (expression_statement
                (assign_expression
                  (identifier)
                  (assign_operator)
                  (function_call_expression
                    (identifier))))
              (expression_statement
                (assign_expression
                  (identifier)
                  (assign_operator)
                  (function_call_expression
                    (identifier))))
              (expression_statement
                (assert_expression
                  (parenthesized_expression
                    (binary_expression
                      (identifier)
                      (less_equal_operator)
                      (identifier))))))))))

===
Function that returns a unit literal
===

fn func() -> () {
    return ();
}
---
    (source_file
      (function_definition
        (function_keyword)
        (identifier)
        (argument_list)
        (rightarrow_operator)
        (type_unit)
        (block
          (return_statement
            (unit_literal)))))

===
Arrays as parameters and return types
===
fn concatInts(xss : [[i64]]) -> [i64] {

}
---
(source_file
  (function_definition
    (function_keyword)
    (identifier)
    (argument_list
      (argument_declaration
        (identifier)
        (type_array
          (type_array
            (type_i64)))))
    (rightarrow_operator)
    (type_array
      (type_i64))
    (block)))
