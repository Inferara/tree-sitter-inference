===
Function definition
===

fn func() -> i32 {

}

---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (lrb_symbol)
        (rrb_symbol)
        (rightarrow_operator)
        (type)
        (lcb_symbol)
        (rcb_symbol)))

===
Function with one parameter
===

fn func(x: i32) -> i32 {

}

---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (lrb_symbol)
    (parameter_definition
        (identifier)
        (semicolon_symbol)
        (type))
    (rrb_symbol)
    (rightarrow_operator)
    (type)
    (lcb_symbol)
    (rcb_symbol)))

===
Function with multiple parameters
===
fn func(x: i32, y: i32) -> i32 {

}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (lrb_symbol)
        (parameter_definition
            (identifier)
            (semicolon_symbol)
            (type))
        (comma_symbol)
        (parameter_definition
            (identifier)
            (semicolon_symbol)
            (type))
        (rrb_symbol)
        (rightarrow_operator)
        (type)
        (lcb_symbol)
        (rcb_symbol)))

===
Function with trailing comma in parameter list
===
fn func(x: i32, y: i32,) -> i32 {

}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (lrb_symbol)
        (parameter_definition
            (identifier)
            (semicolon_symbol)
            (type))
        (comma_symbol)
        (parameter_definition
            (identifier)
            (semicolon_symbol)
            (type))
        (comma_symbol)
        (rrb_symbol)
        (rightarrow_operator)
        (type)
        (lcb_symbol)
        (rcb_symbol)))

===
Function with return i32
===

fn func() -> i32 {
    return 0;
}
---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (lrb_symbol)
    (rrb_symbol)
    (rightarrow_operator)
    (type)
    (lcb_symbol)
    (return_statement
        (return_keyword)
        (expression
        (literal
            (number_literal)))
        (terminal_symbol))
    (rcb_symbol)))

===
Function with return bool true
===

fn func() -> bool {
    return true;
}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (lrb_symbol)
        (rrb_symbol)
        (rightarrow_operator)
        (type)
        (lcb_symbol)
        (return_statement
            (return_keyword)
            (expression
                (literal
                    (bool_literal)))
            (terminal_symbol))
        (rcb_symbol)))

===
Function with return bool false
===

fn func() -> bool {
    return true;
}
---

(source_file
    (function_definition
        (function_keyword)
        (identifier)
        (lrb_symbol)
        (rrb_symbol)
        (rightarrow_operator)
        (type)
        (lcb_symbol)
        (return_statement
            (return_keyword)
            (expression
                (literal
                    (bool_literal)))
            (terminal_symbol))
        (rcb_symbol)))

===
Function with return identifier
===
fn constructor() -> some_context {
}
---

(source_file
    (function_definition
    (function_keyword)
    (identifier)
    (lrb_symbol)
    (rrb_symbol)
    (rightarrow_operator)
    (type
        (identifier))
    (lcb_symbol)
    (rcb_symbol)))
